version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: smscrm
    ports:
      - '5433:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - '6380:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ..
      dockerfile: apps/api/Dockerfile
    ports:
      - '3000:3000'
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/smscrm
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PORT: 3000
      NODE_ENV: development
      API_BASE_URL: http://api:3000
      CORS_ORIGIN: http://localhost:3001
      COOKIE_SECRET: dev-cookie-secret-change-in-prod
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_FROM_NUMBER: ${TWILIO_FROM_NUMBER}
      SHORT_DOMAIN: ${SHORT_DOMAIN:-sms.link}
      SHORT_LINK_SECRET: ${SHORT_LINK_SECRET:-dev-secret}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  worker:
    build:
      context: ..
      dockerfile: worker/shortener/Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/smscrm
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NODE_ENV: development
      API_BASE_URL: http://api:3000
      WORKER_PORT: 3002
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_FROM_NUMBER: ${TWILIO_FROM_NUMBER}
      SHORT_DOMAIN: ${SHORT_DOMAIN:-sms.link}
      SHORT_LINK_SECRET: ${SHORT_LINK_SECRET:-dev-secret}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  shortener:
    build:
      context: ..
      dockerfile: worker/shortener/Dockerfile.shortener
    ports:
      - '3003:3003'
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/smscrm
      NODE_ENV: development
      API_BASE_URL: http://api:3000
      SHORTENER_PORT: 3003
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  web:
    build:
      context: ..
      dockerfile: apps/web/Dockerfile
    ports:
      - '3001:3001'
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3000
      NODE_ENV: development
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
