name: Deploy to Cloudflare

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: smscrm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Build packages
        run: pnpm run build

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/smscrm_test
          REDIS_URL: redis://localhost:6379
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test
        run: pnpm run test

  deploy-web:
    needs: test
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: sms-crm-web
          directory: apps/web
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  deploy-shortener:
    needs: test
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Deploy Shortener Worker
        working-directory: worker/shortener-cloudflare
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          wrangler deploy

  deploy-api:
    needs: test
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

      - name: Deploy API to VPS
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          ssh -i ~/.ssh/deploy_key ${SSH_USER}@${SSH_HOST} << 'EOF'
            set -e

            echo "🚀 Starting API deployment..."

            # Navigate to project directory
            cd ${DEPLOY_PATH}

            # Pull latest changes
            echo "📥 Pulling latest code..."
            git pull origin main

            # Run deployment script
            echo "🔧 Running deployment script..."
            bash infra/deploy.sh

            echo "✅ API deployment completed successfully!"
          EOF

      - name: Cleanup SSH
        if: always()
        run: rm -f ~/.ssh/deploy_key

  verify:
    needs: [deploy-web, deploy-shortener, deploy-api]
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Verify Web App
        run: |
          echo "🔍 Verifying web app..."
          curl -f ${{ secrets.WEB_URL }}/health || echo "Web app health check failed"

      - name: Verify Shortener
        run: |
          echo "🔍 Verifying shortener..."
          curl -f ${{ secrets.SHORTENER_URL }}/health || echo "Shortener health check failed"

      - name: Verify API
        run: |
          echo "🔍 Verifying API..."
          curl -f ${{ secrets.API_URL }}/health || echo "API health check failed"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Cloudflare deployment successful!"
          else
            echo "❌ Cloudflare deployment failed!"
          fi